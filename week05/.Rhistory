library(shiny)
### function to calculate the ExpRevenue, ProtectBest and OptimalExpRevenue
findBestAllocation <- function (meanDemandForCroissant=50,meanDemandForSandwich=20,
capacity=50,priceForCroissant=1, priceForSandwich=1.5){
mL <- meanDemandForCroissant
mH <- meanDemandForSandwich
pL <- priceForCroissant
pH <- priceForSandwich
capacity <- capacity
ExpRevenue=rep(0,capacity+1)
for (i in 1:(capacity+1)){
protect=i-1
availforLowFare=capacity-protect;
ExpRevenue[i]=0;
for(dL in 0:100){
soldLowFare=min(availforLowFare,dL)
remainforHighFare=capacity-soldLowFare
for(dH in 0:100){
soldHighFare=min(remainforHighFare,dH)
RevenueThisIter=pL*soldLowFare+pH*soldHighFare
ExpRevenue[i]=ExpRevenue[i]+ RevenueThisIter*dpois(dL,mL)*dpois(dH,mH)
}
}
}
Protectindexbest = which(ExpRevenue == max(ExpRevenue))
ProtectBest=Protectindexbest-1
OptimalExpRevenue=max(ExpRevenue)
res =   list(
meanDemandForCroissant= meanDemandForCroissant,
meanDemandForSandwich = meanDemandForSandwich,
pL = priceForCroissant,
pH = priceForSandwich,
capacity = capacity,
ExpRevenue=ExpRevenue,
ProtectBest=ProtectBest,
OptimalExpRevenue=OptimalExpRevenue
)
return(res)
}
bestAllocation = findBestAllocation()
ui = fluidPage(
titlePanel("Influence of varibales change"),
sidebarLayout(
sidebarPanel(
sliderInput("croissants",
"Mean demand for croissants:",
min = 1,  max = 100, value = 15),
sliderInput("sandwiches",
"Mean demand for sandwiches:",
min = 1,  max = 100, value = 15),
sliderInput("capacity",
"Max capacity:",
min = 1,  max = 100, value = 30),
sliderInput("priceForCroissant",
"Price for croissant:",
min = 0,  max = 10, value = 1),
sliderInput("priceForSandwich",
"Price for sandwich:",
min = 0,  max = 10, value = 1.5),
),
mainPanel(
plotOutput("plot")
)
)
)
server = function(input, output) {
output$plot = renderPlot({
allocation = findBestAllocation(input$croissants,input$sandwiches,input$capacity,
input$priceForCroissant,input$priceForSandwich)
print(allocation)
capacity <- allocation$capacity
ExpRevenue <- allocation$ExpRevenue
ProtectBest <- allocation$ProtectBest
xaxis=1:length(ExpRevenue)
plot(xaxis,ExpRevenue,pch = 16, cex = 0.5,las=1, xaxt="n", ylim=c(0,max(ExpRevenue)+10),
xlab="Croissants Protected",ylab="Expected Revenue",cex.lab=1.25,
cex.axis=1, cex.main=1.25)
xticks <- seq(0, capacity, by=50)
axis(side = 1, at = xticks)
axis(side = 1, at = ProtectBest)
lines(c(ProtectBest,ProtectBest),c(0, max(ExpRevenue)),lty=2,col="red")
axis(side = 2, at = round(max(ExpRevenue),2),las=1)
lines(c(0,ProtectBest),c(max(ExpRevenue), max(ExpRevenue)),lty=2,col="red")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
### function to calculate the ExpRevenue, ProtectBest and OptimalExpRevenue
findBestAllocation <- function (meanDemandForCroissant=50,meanDemandForSandwich=20,
capacity=50,priceForCroissant=1, priceForSandwich=1.5){
mL <- meanDemandForCroissant
mH <- meanDemandForSandwich
pL <- priceForCroissant
pH <- priceForSandwich
capacity <- capacity
ExpRevenue=rep(0,capacity+1)
for (i in 1:(capacity+1)){
protect=i-1
availforLowFare=capacity-protect;
ExpRevenue[i]=0;
for(dL in 0:100){
soldLowFare=min(availforLowFare,dL)
remainforHighFare=capacity-soldLowFare
for(dH in 0:100){
soldHighFare=min(remainforHighFare,dH)
RevenueThisIter=pL*soldLowFare+pH*soldHighFare
ExpRevenue[i]=ExpRevenue[i]+ RevenueThisIter*dpois(dL,mL)*dpois(dH,mH)
}
}
}
Protectindexbest = which(ExpRevenue == max(ExpRevenue))
ProtectBest=Protectindexbest-1
OptimalExpRevenue=max(ExpRevenue)
res =   list(
meanDemandForCroissant= meanDemandForCroissant,
meanDemandForSandwich = meanDemandForSandwich,
pL = priceForCroissant,
pH = priceForSandwich,
capacity = capacity,
ExpRevenue=ExpRevenue,
ProtectBest=ProtectBest,
OptimalExpRevenue=OptimalExpRevenue
)
return(res)
}
bestAllocation = findBestAllocation()
ui = fluidPage(
titlePanel("Influence of varibales change"),
sidebarLayout(
sidebarPanel(
sliderInput("croissants",
"Mean demand for croissants:",
min = 1,  max = 100, value = 50),
sliderInput("sandwiches",
"Mean demand for sandwiches:",
min = 1,  max = 100, value = 20),
sliderInput("capacity",
"Max capacity:",
min = 1,  max = 100, value = 50),
sliderInput("priceForCroissant",
"Price for croissant:",
min = 0,  max = 10, value = 1),
sliderInput("priceForSandwich",
"Price for sandwich:",
min = 0,  max = 10, value = 1.5),
),
mainPanel(
plotOutput("plot")
)
)
)
server = function(input, output) {
output$plot = renderPlot({
allocation = findBestAllocation(input$croissants,input$sandwiches,input$capacity,
input$priceForCroissant,input$priceForSandwich)
print(allocation)
capacity <- allocation$capacity
ExpRevenue <- allocation$ExpRevenue
ProtectBest <- allocation$ProtectBest
xaxis=1:length(ExpRevenue)
plot(xaxis,ExpRevenue,pch = 16, cex = 0.5,las=1, xaxt="n", ylim=c(0,max(ExpRevenue)+10),
xlab="Croissants Protected",ylab="Expected Revenue",cex.lab=1.25,
cex.axis=1, cex.main=1.25)
xticks <- seq(0, capacity, by=50)
axis(side = 1, at = xticks)
axis(side = 1, at = ProtectBest)
lines(c(ProtectBest,ProtectBest),c(0, max(ExpRevenue)),lty=2,col="red")
axis(side = 2, at = round(max(ExpRevenue),2),las=1)
lines(c(0,ProtectBest),c(max(ExpRevenue), max(ExpRevenue)),lty=2,col="red")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
### function to calculate the ExpRevenue, ProtectBest and OptimalExpRevenue
findBestAllocation <- function (meanDemandForCroissant=50,meanDemandForSandwich=20,
capacity=50,priceForCroissant=1, priceForSandwich=1.5){
mL <- meanDemandForCroissant
mH <- meanDemandForSandwich
pL <- priceForCroissant
pH <- priceForSandwich
capacity <- capacity
ExpRevenue=rep(0,capacity+1)
for (i in 1:(capacity+1)){
protect=i-1
availforLowFare=capacity-protect;
ExpRevenue[i]=0;
for(dL in 0:100){
soldLowFare=min(availforLowFare,dL)
remainforHighFare=capacity-soldLowFare
for(dH in 0:100){
soldHighFare=min(remainforHighFare,dH)
RevenueThisIter=pL*soldLowFare+pH*soldHighFare
ExpRevenue[i]=ExpRevenue[i]+ RevenueThisIter*dpois(dL,mL)*dpois(dH,mH)
}
}
}
Protectindexbest = which(ExpRevenue == max(ExpRevenue))
ProtectBest=Protectindexbest-1
OptimalExpRevenue=max(ExpRevenue)
res =   list(
meanDemandForCroissant= meanDemandForCroissant,
meanDemandForSandwich = meanDemandForSandwich,
pL = priceForCroissant,
pH = priceForSandwich,
capacity = capacity,
ExpRevenue=ExpRevenue,
ProtectBest=ProtectBest,
OptimalExpRevenue=OptimalExpRevenue
)
return(res)
}
bestAllocation = findBestAllocation()
ui = fluidPage(
# Application title
titlePanel("Influence of varibales change"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
sliderInput("croissants",
"Mean demand for croissants:",
min = 1,  max = 100, value = 15),
sliderInput("sandwiches",
"Mean demand for sandwiches:",
min = 1,  max = 100, value = 15),
sliderInput("capacity",
"Max capacity:",
min = 1,  max = 100, value = 30),
sliderInput("priceForCroissant",
"Price for croissant:",
min = 0,  max = 10, value = 1, step = 0.5),
sliderInput("priceForSandwich",
"Price for sandwich:",
min = 0,  max = 10, value = 1.5, step = 0.5),
),
mainPanel(
plotOutput("plot")
)
)
)
server = function(input, output) {
output$plot = renderPlot({
allocation = findBestAllocation(input$croissants,input$sandwiches,input$capacity,
input$priceForCroissant,input$priceForSandwich)
print(allocation)
capacity <- allocation$capacity
ExpRevenue <- allocation$ExpRevenue
ProtectBest <- allocation$ProtectBest
xaxis=1:length(ExpRevenue)
plot(xaxis,ExpRevenue,pch = 16, cex = 0.5,las=1, xaxt="n", ylim=c(0,max(ExpRevenue)+10),
xlab="Croissants Protected",ylab="Expected Revenue",cex.lab=1.25,
cex.axis=1, cex.main=1.25)
xticks <- seq(0, capacity, by=50)
axis(side = 1, at = xticks)
axis(side = 1, at = ProtectBest)
lines(c(ProtectBest,ProtectBest),c(0, max(ExpRevenue)),lty=2,col="red")
axis(side = 2, at = round(max(ExpRevenue),2),las=1)
lines(c(0,ProtectBest),c(max(ExpRevenue), max(ExpRevenue)),lty=2,col="red")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
### function to calculate the ExpRevenue, ProtectBest and OptimalExpRevenue
findBestAllocation <- function (meanDemandForCroissant=50,meanDemandForSandwich=20,
capacity=50,priceForCroissant=1, priceForSandwich=1.5){
mL <- meanDemandForCroissant
mH <- meanDemandForSandwich
pL <- priceForCroissant
pH <- priceForSandwich
capacity <- capacity
ExpRevenue=rep(0,capacity+1)
for (i in 1:(capacity+1)){
protect=i-1
availforLowFare=capacity-protect;
ExpRevenue[i]=0;
for(dL in 0:100){
soldLowFare=min(availforLowFare,dL)
remainforHighFare=capacity-soldLowFare
for(dH in 0:100){
soldHighFare=min(remainforHighFare,dH)
RevenueThisIter=pL*soldLowFare+pH*soldHighFare
ExpRevenue[i]=ExpRevenue[i]+ RevenueThisIter*dpois(dL,mL)*dpois(dH,mH)
}
}
}
Protectindexbest = which(ExpRevenue == max(ExpRevenue))
ProtectBest=Protectindexbest-1
OptimalExpRevenue=max(ExpRevenue)
res =   list(
meanDemandForCroissant= meanDemandForCroissant,
meanDemandForSandwich = meanDemandForSandwich,
pL = priceForCroissant,
pH = priceForSandwich,
capacity = capacity,
ExpRevenue=ExpRevenue,
ProtectBest=ProtectBest,
OptimalExpRevenue=OptimalExpRevenue
)
return(res)
}
bestAllocation = findBestAllocation()
ui = fluidPage(
# Application title
titlePanel("Influence of varibales change"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
sliderInput("croissants",
"Mean demand for croissants:",
min = 1,  max = 100, value = 50),
sliderInput("sandwiches",
"Mean demand for sandwiches:",
min = 1,  max = 100, value = 20),
sliderInput("capacity",
"Max capacity:",
min = 1,  max = 100, value = 50),
sliderInput("priceForCroissant",
"Price for croissant:",
min = 0,  max = 10, value = 1, step = 0.5),
sliderInput("priceForSandwich",
"Price for sandwich:",
min = 0,  max = 10, value = 1.5, step = 0.5),
),
mainPanel(
plotOutput("plot")
)
)
)
server = function(input, output) {
output$plot = renderPlot({
allocation = findBestAllocation(input$croissants,input$sandwiches,input$capacity,
input$priceForCroissant,input$priceForSandwich)
print(allocation)
capacity <- allocation$capacity
ExpRevenue <- allocation$ExpRevenue
ProtectBest <- allocation$ProtectBest
xaxis=1:length(ExpRevenue)
plot(xaxis,ExpRevenue,pch = 16, cex = 0.5,las=1, xaxt="n", ylim=c(0,max(ExpRevenue)+10),
xlab="Croissants Protected",ylab="Expected Revenue",cex.lab=1.25,
cex.axis=1, cex.main=1.25)
xticks <- seq(0, capacity, by=50)
axis(side = 1, at = xticks)
axis(side = 1, at = ProtectBest)
lines(c(ProtectBest,ProtectBest),c(0, max(ExpRevenue)),lty=2,col="red")
axis(side = 2, at = round(max(ExpRevenue),2),las=1)
lines(c(0,ProtectBest),c(max(ExpRevenue), max(ExpRevenue)),lty=2,col="red")
})
}
shinyApp(ui = ui, server = server)
setwd("H:/My Drive/github/machine-learning-smm636/week05")
library(e1071)
data(iris)
attach(iris)
## classification mode
# default with factor response:
model = svm(Species ~ ., data = iris)
# alternatively the traditional interface:
model = svm(iris[,-5], iris[,5])
print(model)
summary(model)
# test with train data
pred = predict(model, iris[,-5])
# (same as:)
pred = fitted(model)
# Check accuracy:
table(pred, iris[,5])
# compute decision values and probabilities:
pred = predict(model, iris[,-5], decision.values = TRUE)
attr(pred, "decision.values")[1:4,]
pred[1:4]
# visualize (classes by color, SV by crosses):
plot(cmdscale(dist(iris[,-5])),
col = as.integer(iris[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
attr(pred, "decision.values")[55,]
pred[55]
# get probabilities
model = svm(iris[,-5], iris[,5], probability = TRUE)
pred = predict(model, iris[,-5], decision.values = TRUE, probability = TRUE)
attr(pred, "decision.values")[1:4,]
attr(pred, "probabilities")[1:4,]
##############tune parameters for radial kernel
set.seed(392)
tune.out= tune(svm, iris[,-5], iris[,5],
ranges = list(gamma = 2^(-1:1), cost = 2^(2:4)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
summary(tune.out)
plot(tune.out)
2^(-1:1)
2^(2:4)
iris[,-5]
iris[,5]
# use the best model to predict the training instances
tune.out$best.model
pred=predict(tune.out$best.model,iris[,-5])
table(pred, iris[,5])
########################################################
################use svm in caret############################
########################################################
library(caret)
#load german credit data from caret package
data(GermanCredit)
# classify two status: good or bad
## Show the first 10 columns
str(GermanCredit[, 1:10])
## Delete two variables where all values are the same for both classes
GermanCredit[,c("Purpose.Vacation","Personal.Female.Single")] <- list(NULL)
#Get training and test sets
set.seed(12)
trainIndex = createDataPartition(GermanCredit$Class, p = 0.7, list = FALSE, times = 1)
train=GermanCredit[trainIndex,] # training set
test=GermanCredit[-trainIndex,-10] # test set
#train the model
fitControl=trainControl(
method = "repeatedcv",
number = 5,
repeats = 3)
set.seed(2333)
