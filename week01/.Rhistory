data()
source("~/.active-rstudio-document")
print(data)
data <- View("AirPassengers")
source("~/.active-rstudio-document")
View("AirPassengers")
View(AirPassengers)
AirPassengers
setwd("~/Documents/GitHub/msc-ba-rstudio")
install.packages
install.packages("tidyverse")
setwd("~/mattlim96@gmail.com - Google Drive/My Drive/github")
setwd("~/mattlim96@gmail.com - Google Drive/My Drive/github/machine-learning-smm636/week01")
clear
knitr::opts_chunk$set(echo = TRUE)
data()
help(iris) # description of the iris data
str(iris) # displays the structure of the iris data
table(iris$Species)  # gives you a table of the species variable
summary(iris) # five-number summary statistics of the variables
# set the colours for the three classes
cols<- c("steelblue1", "hotpink", "mediumpurple")
# set the symbols for the three classes
pchs<-c(1,2,3)
# use pairs() to create the pairs plot, with different colours and symbols
# for different classes
pairs(iris[,1:4], pch = pchs[iris$Species],  cex = 1,
col = cols[iris$Species],
lower.panel=NULL)
# create a legend for the plot
par(xpd = TRUE) # enables you to add a legend outside of the plot region
legend("bottomleft",legend=c("setosa","versicolor","virginica"),
col=cols,pch=pchs,cex=0.5,text.font=2)
# oma allows you to create some spare space for the legend
#  here we make the right margin quite large
pairs(iris[,1:4], pch = pchs[iris$Species],  cex = 1,
col = cols[iris$Species],oma=c(4,4,6,12))
# create a legend for the plot
par(xpd = TRUE) # enables you to add a legend outside of the plot region
legend(0.85, 0.3,legend=c("setosa","versicolor","virginica"),
col=cols,pch=pchs,cex=1,text.font=2)
Default=read.table("Default.txt",header=TRUE)
str(Default) # gives you the structure of the Default data
table(Default$default)  # gives you a table of the default variable
summary(Default) # five-number summary statistics of the variables
# get the first 50 default=No
default_no_all=Default[Default$default=="No",]
default_no_50_1=default_no_all[1:50,]
# alternatively, try
default_no_50_2=Default[Default$default=="No",][1:50,]
# check whether default_no_50_1 is equivalent to
# default_no_50_2 by yourself
sum(default_no_50_1[,3]!=default_no_50_2[,3])
sum(default_no_50_1[,3]==default_no_50_2[,3])
default_no_50 = default_no_50_2
# get the first 50 default=Yes
default_yes_50 = Default[Default$default=="Yes",][1:50,]
# combine default_no_50 and default_yes_50
# to get the subset
default_50 = rbind(default_no_50,default_yes_50)
?rbind
?set.seed
set.seed(375) # make the random sampling reproducible
default_no_rand=Default[sample(which(Default$default=="No"),50),]
default_yes_rand=Default[sample(which(Default$default=="Yes"),50),]
?which
which(Default$default=="Yes")
?sample
default_rand = rbind(default_no_rand,default_yes_rand)
n=50
set.seed(375) # make the random sampling reproducible
default_no_rand=Default[sample(which(Default$default=="No"),n),]
default_yes_rand=Default[sample(which(Default$default=="Yes"),n),]
default_rand = rbind(default_no_rand,default_yes_rand)
help(iris) # description of the iris data
str(iris) # displays the structure of the iris data
table(iris$Species)  # gives you a table of the species variable
summary(iris) # five-number summary statistics of the variables
help(iris) # description of the iris data
str(iris) # displays the structure of the iris data
table(iris$Species)  # gives you a table of the species variable
summary(iris) # five-number summary statistics of the variables
# set the colours for the three classes
cols<- c("steelblue1", "hotpink", "mediumpurple")
# set the symbols for the three classes
pchs<-c(1,2,3)
# use pairs() to create the pairs plot, with different colours and symbols
# for different classes
pairs(iris[,1:4], pch = pchs[iris$Species],  cex = 1,
col = cols[iris$Species],
lower.panel=NULL)
# create a legend for the plot
par(xpd = TRUE) # enables you to add a legend outside of the plot region
legend("bottomleft",legend=c("setosa","versicolor","virginica"),
col=cols,pch=pchs,cex=0.5,text.font=2)
help(iris) # description of the iris data
str(iris) # displays the structure of the iris data
table(iris$Species)  # gives you a table of the species variable
summary(iris) # five-number summary statistics of the variables
?pairs
# set the colours for the three classes
cols<- c("steelblue1", "hotpink", "mediumpurple")
# set the symbols for the three classes
pchs<-c(1,2,3)
# use pairs() to create the pairs plot, with different colours and symbols
# for different classes
pairs(iris[,1:4], pch = pchs[iris$Species],  cex = 1,
col = cols[iris$Species],
lower.panel=NULL)
# create a legend for the plot
# par(xpd = TRUE) # enables you to add a legend outside of the plot region
legend("bottomleft",legend=c("setosa","versicolor","virginica"),
col=cols,pch=pchs,cex=0.5,text.font=2)
# set the colours for the three classes
cols<- c("steelblue1", "hotpink", "mediumpurple")
# set the symbols for the three classes
pchs<-c(1,2,3)
# use pairs() to create the pairs plot, with different colours and symbols
# for different classes
pairs(iris[,1:4], pch = pchs[iris$Species],  cex = 1,
col = cols[iris$Species],
lower.panel=NULL)
# create a legend for the plot
par(xpd = TRUE) # enables you to add a legend outside of the plot region
legend("bottomleft",legend=c("setosa","versicolor","virginica"),
col=cols,pch=pchs,cex=0.5,text.font=2)
# set the colours for the three classes
cols<- c("steelblue1", "hotpink", "mediumpurple")
# set the symbols for the three classes
pchs<-c(1,2,3)
# use pairs() to create the pairs plot, with different colours and symbols
# for different classes
pairs(iris[,1:4], pch = pchs[iris$Species],  cex = 1,
col = cols[iris$Species],
upper.panel=NULL)
# create a legend for the plot
par(xpd = TRUE) # enables you to add a legend outside of the plot region
legend("bottomleft",legend=c("setosa","versicolor","virginica"),
col=cols,pch=pchs,cex=0.5,text.font=2)
# set the colours for the three classes
cols<- c("steelblue1", "hotpink", "mediumpurple")
# set the symbols for the three classes
pchs<-c(1,2,3)
# use pairs() to create the pairs plot, with different colours and symbols
# for different classes
pairs(iris[,1:4], pch = pchs[iris$Species],  cex = 1,
col = cols[iris$Species],
upper.panel=NULL)
# create a legend for the plot
par(xpd = TRUE) # enables you to add a legend outside of the plot region
legend("topright",legend=c("setosa","versicolor","virginica"),
col=cols,pch=pchs,cex=0.5,text.font=2)
iris$Species
# Open a new plot device
dev.new(width=5, height=4, unit="in")
# use pairs() to create the pairs plot, with different colours and symbols
# for different classes
pairs(iris[,1:4], pch = pchs[iris$Species],  cex = 1,
col = cols[iris$Species],
lower.panel=NULL)
# create a legend for the plot
par(xpd = TRUE) # enables you to add a legend outside of the plot region
legend("bottomleft",legend=c("setosa","versicolor","virginica"),
col=cols,pch=pchs,cex=1,text.font=4)
# use pdf() to open a new pdf device
pdf("iris-plot.pdf",width=7, height=5)
# use pairs() to create the pairs plot, with different colours and symbols
# for different classes
pairs(iris[,1:4], pch = pchs[iris$Species],  cex = 1,
col = cols[iris$Species],
lower.panel=NULL)
# create a legend for the plot
par(xpd = TRUE) # enables you to add a legend outside of the plot region
legend("bottomleft",legend=c("setosa","versicolor","virginica"),
col=cols,pch=pchs,cex=1,text.font=4)
# close the device
dev.off()
# oma allows you to create some spare space for the legend
#  here we make the right margin quite large
pairs(iris[,1:4], pch = pchs[iris$Species],  cex = 1,
col = cols[iris$Species],oma=c(4,4,6,12))
# create a legend for the plot
par(xpd = TRUE) # enables you to add a legend outside of the plot region
legend(0.85, 0.3,legend=c("setosa","versicolor","virginica"),
col=cols,pch=pchs,cex=1,text.font=2)
Default=read.table("Default.txt",header=TRUE)
str(Default) # gives you the structure of the Default data
table(Default$default)  # gives you a table of the default variable
summary(Default) # five-number summary statistics of the variables
# get the first 50 default=No
default_no_all=Default[Default$default=="No",]
default_no_50_1=default_no_all[1:50,]
# alternatively, try
default_no_50_2=Default[Default$default=="No",][1:50,]
# check whether default_no_50_1 is equivalent to
# default_no_50_2 by yourself
sum(default_no_50_1[,3]!=default_no_50_2[,3])
sum(default_no_50_1[,3]==default_no_50_2[,3])
default_no_50 = default_no_50_2
# get the first 50 default=Yes
default_yes_50 = Default[Default$default=="Yes",][1:50,]
# combine default_no_50 and default_yes_50
# to get the subset
default_50 = rbind(default_no_50,default_yes_50)
?rbind
# check whether default_no_50_1 is equivalent to
# default_no_50_2 by yourself
sum(default_no_50_1[,3]!=default_no_50_2[,3])
sum(default_no_50_1[,3]==default_no_50_2[,3])
# get the first 50 default=Yes
default_yes_50 = Default[Default$default=="Yes",][1:50,]
# get the first 50 default=No
default_no_all=Default[Default$default=="No",]
default_no_50_1=default_no_all[1:50,]
# alternatively, try
default_no_50_2=Default[Default$default=="No",][1:50,]
# check whether default_no_50_1 is equivalent to
# default_no_50_2 by yourself
sum(default_no_50_1[,3]!=default_no_50_2[,3])
sum(default_no_50_1[,3]==default_no_50_2[,3])
default_no_50 = default_no_50_2
# get the first 50 default=Yes
default_yes_50 = Default[Default$default=="Yes",][1:50,]
# combine default_no_50 and default_yes_50
# to get the subset
default_50 = rbind(default_no_50,default_yes_50)
?rbind
?rbind
?set.seed
set.seed(375) # make the random sampling reproducible
default_no_rand=Default[sample(which(Default$default=="No"),50),]
default_yes_rand=Default[sample(which(Default$default=="Yes"),50),]
?which
which(Default$default=="Yes")
?sample
default_rand = rbind(default_no_rand,default_yes_rand)
?which
which(Default$default=="No")
?sample
which(Default$default=="Yes")
?set.seed
set.seed(375) # make the random sampling reproducible
default_no_rand=Default[sample(which(Default$default=="No"),50),]
default_yes_rand=Default[sample(which(Default$default=="Yes"),50),]
?which
which(Default$default=="Yes")
?sample
default_rand = rbind(default_no_rand,default_yes_rand)
n=50
set.seed(375) # make the random sampling reproducible
default_no_rand=Default[sample(which(Default$default=="No"),n),]
default_yes_rand=Default[sample(which(Default$default=="Yes"),n),]
default_rand = rbind(default_no_rand,default_yes_rand)
