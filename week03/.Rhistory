library(shiny)
### function to calculate the ExpRevenue, ProtectBest and OptimalExpRevenue
findBestAllocation <- function (meanDemandForCroissant=50,meanDemandForSandwich=20,
capacity=50,priceForCroissant=1, priceForSandwich=1.5){
mL <- meanDemandForCroissant
mH <- meanDemandForSandwich
pL <- priceForCroissant
pH <- priceForSandwich
capacity <- capacity
ExpRevenue=rep(0,capacity+1)
for (i in 1:(capacity+1)){
protect=i-1
availforLowFare=capacity-protect;
ExpRevenue[i]=0;
for(dL in 0:100){
soldLowFare=min(availforLowFare,dL)
remainforHighFare=capacity-soldLowFare
for(dH in 0:100){
soldHighFare=min(remainforHighFare,dH)
RevenueThisIter=pL*soldLowFare+pH*soldHighFare
ExpRevenue[i]=ExpRevenue[i]+ RevenueThisIter*dpois(dL,mL)*dpois(dH,mH)
}
}
}
Protectindexbest = which(ExpRevenue == max(ExpRevenue))
ProtectBest=Protectindexbest-1
OptimalExpRevenue=max(ExpRevenue)
res =   list(
meanDemandForCroissant= meanDemandForCroissant,
meanDemandForSandwich = meanDemandForSandwich,
pL = priceForCroissant,
pH = priceForSandwich,
capacity = capacity,
ExpRevenue=ExpRevenue,
ProtectBest=ProtectBest,
OptimalExpRevenue=OptimalExpRevenue
)
return(res)
}
bestAllocation = findBestAllocation()
ui = fluidPage(
titlePanel("Influence of varibales change"),
sidebarLayout(
sidebarPanel(
sliderInput("croissants",
"Mean demand for croissants:",
min = 1,  max = 100, value = 15),
sliderInput("sandwiches",
"Mean demand for sandwiches:",
min = 1,  max = 100, value = 15),
sliderInput("capacity",
"Max capacity:",
min = 1,  max = 100, value = 30),
sliderInput("priceForCroissant",
"Price for croissant:",
min = 0,  max = 10, value = 1),
sliderInput("priceForSandwich",
"Price for sandwich:",
min = 0,  max = 10, value = 1.5),
),
mainPanel(
plotOutput("plot")
)
)
)
server = function(input, output) {
output$plot = renderPlot({
allocation = findBestAllocation(input$croissants,input$sandwiches,input$capacity,
input$priceForCroissant,input$priceForSandwich)
print(allocation)
capacity <- allocation$capacity
ExpRevenue <- allocation$ExpRevenue
ProtectBest <- allocation$ProtectBest
xaxis=1:length(ExpRevenue)
plot(xaxis,ExpRevenue,pch = 16, cex = 0.5,las=1, xaxt="n", ylim=c(0,max(ExpRevenue)+10),
xlab="Croissants Protected",ylab="Expected Revenue",cex.lab=1.25,
cex.axis=1, cex.main=1.25)
xticks <- seq(0, capacity, by=50)
axis(side = 1, at = xticks)
axis(side = 1, at = ProtectBest)
lines(c(ProtectBest,ProtectBest),c(0, max(ExpRevenue)),lty=2,col="red")
axis(side = 2, at = round(max(ExpRevenue),2),las=1)
lines(c(0,ProtectBest),c(max(ExpRevenue), max(ExpRevenue)),lty=2,col="red")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
### function to calculate the ExpRevenue, ProtectBest and OptimalExpRevenue
findBestAllocation <- function (meanDemandForCroissant=50,meanDemandForSandwich=20,
capacity=50,priceForCroissant=1, priceForSandwich=1.5){
mL <- meanDemandForCroissant
mH <- meanDemandForSandwich
pL <- priceForCroissant
pH <- priceForSandwich
capacity <- capacity
ExpRevenue=rep(0,capacity+1)
for (i in 1:(capacity+1)){
protect=i-1
availforLowFare=capacity-protect;
ExpRevenue[i]=0;
for(dL in 0:100){
soldLowFare=min(availforLowFare,dL)
remainforHighFare=capacity-soldLowFare
for(dH in 0:100){
soldHighFare=min(remainforHighFare,dH)
RevenueThisIter=pL*soldLowFare+pH*soldHighFare
ExpRevenue[i]=ExpRevenue[i]+ RevenueThisIter*dpois(dL,mL)*dpois(dH,mH)
}
}
}
Protectindexbest = which(ExpRevenue == max(ExpRevenue))
ProtectBest=Protectindexbest-1
OptimalExpRevenue=max(ExpRevenue)
res =   list(
meanDemandForCroissant= meanDemandForCroissant,
meanDemandForSandwich = meanDemandForSandwich,
pL = priceForCroissant,
pH = priceForSandwich,
capacity = capacity,
ExpRevenue=ExpRevenue,
ProtectBest=ProtectBest,
OptimalExpRevenue=OptimalExpRevenue
)
return(res)
}
bestAllocation = findBestAllocation()
ui = fluidPage(
titlePanel("Influence of varibales change"),
sidebarLayout(
sidebarPanel(
sliderInput("croissants",
"Mean demand for croissants:",
min = 1,  max = 100, value = 50),
sliderInput("sandwiches",
"Mean demand for sandwiches:",
min = 1,  max = 100, value = 20),
sliderInput("capacity",
"Max capacity:",
min = 1,  max = 100, value = 50),
sliderInput("priceForCroissant",
"Price for croissant:",
min = 0,  max = 10, value = 1),
sliderInput("priceForSandwich",
"Price for sandwich:",
min = 0,  max = 10, value = 1.5),
),
mainPanel(
plotOutput("plot")
)
)
)
server = function(input, output) {
output$plot = renderPlot({
allocation = findBestAllocation(input$croissants,input$sandwiches,input$capacity,
input$priceForCroissant,input$priceForSandwich)
print(allocation)
capacity <- allocation$capacity
ExpRevenue <- allocation$ExpRevenue
ProtectBest <- allocation$ProtectBest
xaxis=1:length(ExpRevenue)
plot(xaxis,ExpRevenue,pch = 16, cex = 0.5,las=1, xaxt="n", ylim=c(0,max(ExpRevenue)+10),
xlab="Croissants Protected",ylab="Expected Revenue",cex.lab=1.25,
cex.axis=1, cex.main=1.25)
xticks <- seq(0, capacity, by=50)
axis(side = 1, at = xticks)
axis(side = 1, at = ProtectBest)
lines(c(ProtectBest,ProtectBest),c(0, max(ExpRevenue)),lty=2,col="red")
axis(side = 2, at = round(max(ExpRevenue),2),las=1)
lines(c(0,ProtectBest),c(max(ExpRevenue), max(ExpRevenue)),lty=2,col="red")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
### function to calculate the ExpRevenue, ProtectBest and OptimalExpRevenue
findBestAllocation <- function (meanDemandForCroissant=50,meanDemandForSandwich=20,
capacity=50,priceForCroissant=1, priceForSandwich=1.5){
mL <- meanDemandForCroissant
mH <- meanDemandForSandwich
pL <- priceForCroissant
pH <- priceForSandwich
capacity <- capacity
ExpRevenue=rep(0,capacity+1)
for (i in 1:(capacity+1)){
protect=i-1
availforLowFare=capacity-protect;
ExpRevenue[i]=0;
for(dL in 0:100){
soldLowFare=min(availforLowFare,dL)
remainforHighFare=capacity-soldLowFare
for(dH in 0:100){
soldHighFare=min(remainforHighFare,dH)
RevenueThisIter=pL*soldLowFare+pH*soldHighFare
ExpRevenue[i]=ExpRevenue[i]+ RevenueThisIter*dpois(dL,mL)*dpois(dH,mH)
}
}
}
Protectindexbest = which(ExpRevenue == max(ExpRevenue))
ProtectBest=Protectindexbest-1
OptimalExpRevenue=max(ExpRevenue)
res =   list(
meanDemandForCroissant= meanDemandForCroissant,
meanDemandForSandwich = meanDemandForSandwich,
pL = priceForCroissant,
pH = priceForSandwich,
capacity = capacity,
ExpRevenue=ExpRevenue,
ProtectBest=ProtectBest,
OptimalExpRevenue=OptimalExpRevenue
)
return(res)
}
bestAllocation = findBestAllocation()
ui = fluidPage(
# Application title
titlePanel("Influence of varibales change"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
sliderInput("croissants",
"Mean demand for croissants:",
min = 1,  max = 100, value = 15),
sliderInput("sandwiches",
"Mean demand for sandwiches:",
min = 1,  max = 100, value = 15),
sliderInput("capacity",
"Max capacity:",
min = 1,  max = 100, value = 30),
sliderInput("priceForCroissant",
"Price for croissant:",
min = 0,  max = 10, value = 1, step = 0.5),
sliderInput("priceForSandwich",
"Price for sandwich:",
min = 0,  max = 10, value = 1.5, step = 0.5),
),
mainPanel(
plotOutput("plot")
)
)
)
server = function(input, output) {
output$plot = renderPlot({
allocation = findBestAllocation(input$croissants,input$sandwiches,input$capacity,
input$priceForCroissant,input$priceForSandwich)
print(allocation)
capacity <- allocation$capacity
ExpRevenue <- allocation$ExpRevenue
ProtectBest <- allocation$ProtectBest
xaxis=1:length(ExpRevenue)
plot(xaxis,ExpRevenue,pch = 16, cex = 0.5,las=1, xaxt="n", ylim=c(0,max(ExpRevenue)+10),
xlab="Croissants Protected",ylab="Expected Revenue",cex.lab=1.25,
cex.axis=1, cex.main=1.25)
xticks <- seq(0, capacity, by=50)
axis(side = 1, at = xticks)
axis(side = 1, at = ProtectBest)
lines(c(ProtectBest,ProtectBest),c(0, max(ExpRevenue)),lty=2,col="red")
axis(side = 2, at = round(max(ExpRevenue),2),las=1)
lines(c(0,ProtectBest),c(max(ExpRevenue), max(ExpRevenue)),lty=2,col="red")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
### function to calculate the ExpRevenue, ProtectBest and OptimalExpRevenue
findBestAllocation <- function (meanDemandForCroissant=50,meanDemandForSandwich=20,
capacity=50,priceForCroissant=1, priceForSandwich=1.5){
mL <- meanDemandForCroissant
mH <- meanDemandForSandwich
pL <- priceForCroissant
pH <- priceForSandwich
capacity <- capacity
ExpRevenue=rep(0,capacity+1)
for (i in 1:(capacity+1)){
protect=i-1
availforLowFare=capacity-protect;
ExpRevenue[i]=0;
for(dL in 0:100){
soldLowFare=min(availforLowFare,dL)
remainforHighFare=capacity-soldLowFare
for(dH in 0:100){
soldHighFare=min(remainforHighFare,dH)
RevenueThisIter=pL*soldLowFare+pH*soldHighFare
ExpRevenue[i]=ExpRevenue[i]+ RevenueThisIter*dpois(dL,mL)*dpois(dH,mH)
}
}
}
Protectindexbest = which(ExpRevenue == max(ExpRevenue))
ProtectBest=Protectindexbest-1
OptimalExpRevenue=max(ExpRevenue)
res =   list(
meanDemandForCroissant= meanDemandForCroissant,
meanDemandForSandwich = meanDemandForSandwich,
pL = priceForCroissant,
pH = priceForSandwich,
capacity = capacity,
ExpRevenue=ExpRevenue,
ProtectBest=ProtectBest,
OptimalExpRevenue=OptimalExpRevenue
)
return(res)
}
bestAllocation = findBestAllocation()
ui = fluidPage(
# Application title
titlePanel("Influence of varibales change"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
sliderInput("croissants",
"Mean demand for croissants:",
min = 1,  max = 100, value = 50),
sliderInput("sandwiches",
"Mean demand for sandwiches:",
min = 1,  max = 100, value = 20),
sliderInput("capacity",
"Max capacity:",
min = 1,  max = 100, value = 50),
sliderInput("priceForCroissant",
"Price for croissant:",
min = 0,  max = 10, value = 1, step = 0.5),
sliderInput("priceForSandwich",
"Price for sandwich:",
min = 0,  max = 10, value = 1.5, step = 0.5),
),
mainPanel(
plotOutput("plot")
)
)
)
server = function(input, output) {
output$plot = renderPlot({
allocation = findBestAllocation(input$croissants,input$sandwiches,input$capacity,
input$priceForCroissant,input$priceForSandwich)
print(allocation)
capacity <- allocation$capacity
ExpRevenue <- allocation$ExpRevenue
ProtectBest <- allocation$ProtectBest
xaxis=1:length(ExpRevenue)
plot(xaxis,ExpRevenue,pch = 16, cex = 0.5,las=1, xaxt="n", ylim=c(0,max(ExpRevenue)+10),
xlab="Croissants Protected",ylab="Expected Revenue",cex.lab=1.25,
cex.axis=1, cex.main=1.25)
xticks <- seq(0, capacity, by=50)
axis(side = 1, at = xticks)
axis(side = 1, at = ProtectBest)
lines(c(ProtectBest,ProtectBest),c(0, max(ExpRevenue)),lty=2,col="red")
axis(side = 2, at = round(max(ExpRevenue),2),las=1)
lines(c(0,ProtectBest),c(max(ExpRevenue), max(ExpRevenue)),lty=2,col="red")
})
}
shinyApp(ui = ui, server = server)
setwd("/Volumes/GoogleDrive-117044175360160401988/My Drive/github/machine-learning-gp1")
# import libraries
library(caret)
library(dplyr)
library(rattle)
library(corrplot)
# read data
lol.ori = read.csv("high_diamond_ranked_10min.csv", header = TRUE)
# summary of data
str(lol.ori)
summary(lol.ori)
# pre-process data
sum(is.na(lol.ori)) # check missing values
last.colname = names(lol.ori)[ncol(lol.ori)] # get header of last column
lol.ori = lol.ori %>% relocate(blueWins, .after = all_of(last.colname)) # reorder classification column
set.seed(100)
lol.blue = lol.ori[sample(which(lol.ori$blueWins == 1,), 240),]
lol.red = lol.ori[sample(which(lol.ori$blueWins == 0,), 240),]
lol = rbind(lol.blue, lol.red)
# correlation matrix
par(mfrow=c(1,1))
corrplot(cor(lol[,-c(1,ncol(lol))]), type = "lower", tl.col = "black")
# correlation matrix
par(mfrow=c(1,1))
corrplot(cor(lol[,-c(1,ncol(lol))]), tl.col = "black") #, type = "upper"
setwd("H:/My Drive/github/machine-learning-smm636/week03")
library(ISLR)
library(class)
library(ROCR)
library(caret)
str(Caravan)
####################################################
# scale the feature variables
Caravan_scale=scale(Caravan [,-86])
####################################################
# test sample index
index=1:1000
# get training and test set
train.X=Caravan_scale[-index,]
test.X=Caravan_scale[index,]
train.Y=Caravan$Purchase[-index]
test.Y=Caravan$Purchase[index]
####################################################
# kNN
set.seed(47)
knn3_pred=knn3Train(train.X, test.X, train.Y, k = 9, prob=TRUE)
####################################################
#### calculate sensitivity and specificity
source("performance-measure.R")
pos=levels(test.Y)[2]; neg=levels(test.Y)[1]
measures=performance.measure(as.factor(knn3_pred),test.Y,pos,neg)
measures
